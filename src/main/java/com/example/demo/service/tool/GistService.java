package com.example.demo.service.tool;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import dev.langchain4j.agent.tool.P;
import dev.langchain4j.agent.tool.Tool;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.util.logging.Logger;

@Service
public class GistService {

    private Logger log = Logger.getLogger(GistService.class.getName());

    private ObjectMapper objectMapper = new ObjectMapper();

    @Value("${GITHUB_TOKEN:}")
    private String githubToken;

    @Tool("Write the text to a GitHub gist")
    public String writeGist(@P("Text") String text) {

        String formattedText = null;
        try {
            formattedText = objectMapper.writeValueAsString(text);
        } catch (JsonProcessingException e) {
            log.severe("Failed to transform text to JSON value: " + e.getMessage());
            throw new RuntimeException(e);
        }

        String url = "https://api.github.com/gists";

        HttpHeaders headers = new HttpHeaders();
        headers.set("Accept", "application/vnd.github+json");
        headers.set("Authorization", "Bearer " + githubToken);
        headers.set("X-GitHub-Api-Version", "2022-11-28");
        headers.setContentType(MediaType.APPLICATION_JSON);

        String requestBody = String.format("""
                {
                  "description": "Gist generated by AI",
                  "public": true,
                  "files": {
                    "LIST.md": {
                      "content": %s
                    }
                  }
                }
                """, formattedText);

        HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
        RestTemplate restTemplate = new RestTemplate();
        String response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class).getBody();
        log.info(response);
        try {
            JsonNode rootNode = objectMapper.readTree(response);
            JsonNode htmlUrlNode = rootNode.path("html_url");
            String htmlUrl = htmlUrlNode.asText();
            log.info("HTML URL: " + htmlUrl);
            return "Gist created at: " + htmlUrl;
        } catch (IOException e) {
            log.severe("Failed to parse JSON response: " + e.getMessage());
            return "Error: " + e.getMessage();
        }
    }
}
